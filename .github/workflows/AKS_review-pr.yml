name: AKS Review Namespace - Deploy

on:
  issue_comment:
    
env:
  CLUSTER_NAME: ${{secrets.AKS_CLUSTER_NAME}}
  CLUSTER_RESOURCE_GROUP: ${{secrets.AKS_CLUSTER_RESOURCE_GROUP}}
  SECRET: avf-secret
  REQUIRED_CHECK: Build and Scan Container
  
jobs:
  chat-ops:
      runs-on: ubuntu-latest
      if: github.event.issue.pull_request
      outputs:
        comment-status: ${{ steps.check.outputs.triggered }}
        review_namespace: ${{ steps.namespace.outputs.substring }}
        pull_request_number: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.number }}
        source_branch_ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
        source_branch_sha: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.sha }}

      steps:
        - uses: khan/pull-request-comment-trigger@master
          id: check
          with:
            trigger: '/k8s-review -namespace'
          env:
            GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        
        - run: echo Keyword found! Issue Comment Body '${{ github.event.comment.body }}'
          if: steps.check.outputs.triggered == 'true'

        - run: | 
            echo 'Keyword NOT FOUND! ${{ github.event.comment.body }}'
            exit 1
          if: steps.check.outputs.triggered == 'false'
        
        - uses: bhowell2/github-substring-action@v1.0.0
          id: namespace
          with:
            value: '${{ github.event.comment.body }}'
            index_of_str: "-namespace "
        
        - run: 'echo k8s namespace: ${{steps.namespace.outputs.substring}}'

        - name: get pull request ref
          id: get_pull_request_ref
          uses: octokit/request-action@v2.x
          with:
            route: GET /repos/:repository/pulls/:issue_id
            repository: ${{ github.repository }}
            issue_id: ${{ github.event.issue.number }}
          env:
            GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

        - name: Wait for build to succeed
          uses: fountainhead/action-wait-for-check@v1.0.0
          id: wait-for-build
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            checkName: ${{env.REQUIRED_CHECK}}
            ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}

        - name: Do something with a passing build
          if: steps.wait-for-build.outputs.conclusion == 'fail'
          run: exit 1
  
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [chat-ops]
    env:
      NAMESPACE: ${{ needs.chat-ops.outputs.review_namespace }}-pr-${{ github.event.issue.number }}
      SOURCE_REF: ${{ needs.chat-ops.outputs.source_branch_ref }}
      SOURCE_SHA: ${{ needs.chat-ops.outputs.source_branch_sha }}


    steps:                

    - uses: actions/github-script@v3
      id: get-pr
      with:
        script: |
          const request = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          }
          core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
          try {
            const result = await github.pulls.get(request)
            return result.data
          } catch (err) {
            core.setFailed(`Request failed with error ${err}`)
          }
    - name: Checkout Branch
      uses: actions/checkout@v2
      with:
        repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
        ref: ${{ env.SOURCE_SHA }} 

    # Get lowercase repo name
    - name: downcase REPO
      run: |
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

    # Connect to GitHub Container Registry (GHCR)
    - name: Login to GitHub Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push to GHCR
      uses: docker/build-push-action@v2
      with:
        context: ./azure-vote
        file: ./azure-vote/Dockerfile
        push: true
        tags: ghcr.io/${{env.REPO}}:${{ env.SOURCE_SHA }} 
  
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_SERVICE_PROVIDER_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

    - name: create deployment
      id: create_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments
        repository: ${{ github.repository }}
        ref: ${{ env.SOURCE_REF }}
        environment: ${{ env.NAMESPACE }}
        auto_merge: false
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"     

    # Create image pull secret for GHCR
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ghcr.io/${{env.REPO}}
        container-registry-username: ${{ github.actor }}
        container-registry-password: ${{ secrets.GITHUB_TOKEN }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:

        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          ghcr.io/${{env.REPO}}:${{ env.SOURCE_SHA }} 
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}   
    
    # Use kubectl to get load balancer external IP
    - name: Get and Set Load Balancer Public IP
      id: load_balancer_IP
      run: |
        IPAddress=$(kubectl get svc azure-vote-front  -n ${{ env.NAMESPACE }} \
            -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
        echo $IPAddress
        echo '::set-output name=external_ip::'"$IPAddress"''
        echo "aks_external_ip=$IPAddress" >> $GITHUB_ENV
        echo "${{steps.load_balancer_IP.external_ip}}" 
        echo "${{env.aks_external_ip}}"

    - name: set deployment status to success
      id: successful_deployment
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: ${{ env.NAMESPACE }}-pr-${{ github.event.issue.number }}
        environment_url: http://${{ env.aks_external_ip }}
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        mediaType: '{"previews": ["ant-man"]}'
        state: success
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: set deployment status to failure
      id: failed_deployment
      uses: octokit/request-action@v2.x
      if: failure()
      with:
        route: POST /repos/:repository/deployments/:deployment/statuses
        repository: ${{ github.repository }}
        deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
        environment: ${{ env.NAMESPACE }}-pr-${{ github.event.issue.number }}
        environment_url: http://${{ env.aks_external_ip }}
        log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        mediaType: '{"previews": ["ant-man"]}'
        state: failure
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: Comment Deployment Success 
      uses: actions/github-script@v3.0.0
      if: success()
      with:
        result-encoding: string
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### AKS - Review Deployment üöÄ\`Success\`

          #### AKS Deployment Summary

          * __Azure Resource Group__: ${{ env.CLUSTER_RESOURCE_GROUP }}
          * __AKS Cluster Name__: ${{ env.CLUSTER_NAME }}
          * __AKS Namespace__: ${{ env.NAMESPACE }}
          * __Image Name__: ghcr.io/${{env.REPO}}:${{ env.SOURCE_SHA }} 
          * __ref__: ${{ env.SOURCE_REF }}
          * __Actions Run:__ https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`,  Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Comment Deployment Failure
      uses: actions/github-script@v3.0.0
      if: failure()
      with:
        result-encoding: string
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### AKS - Review Deployment ‚ùå\`Failed\`

          #### AKS Attempted Deployment Summary

          * __Azure Resource Group__: ${{ env.CLUSTER_RESOURCE_GROUP }}
          * __AKS Cluster Name__: ${{ env.CLUSTER_NAME }}
          * __AKS Namespace__: ${{ env.NAMESPACE }}
          * __Image Name__: ghcr.io/${{env.REPO}}:${{ env.SOURCE_SHA }} 
          * __ref__: ${{ env.SOURCE_REF }}
          * __Actions Run:__ https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`,  Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

